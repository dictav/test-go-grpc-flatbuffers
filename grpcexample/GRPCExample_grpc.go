//Generated by gRPC Go plugin
//If you make any local changes, they will be lost
//source: person

package grpcexample

import "github.com/google/flatbuffers/go"

import (
  context "golang.org/x/net/context"
  grpc "google.golang.org/grpc"
)

// Client API for GRPCExample service
type GRPCExampleClient interface{
  GetPerson(ctx context.Context, in *flatbuffers.Builder, 
  	opts... grpc.CallOption) (* Person, error)  
  ListPeople(ctx context.Context, in *flatbuffers.Builder, 
  	opts... grpc.CallOption) (GRPCExample_ListPeopleClient, error)  
  ArrayPeople(ctx context.Context, in *flatbuffers.Builder, 
  	opts... grpc.CallOption) (* Result, error)  
}

type gRPCExampleClient struct {
  cc *grpc.ClientConn
}

func NewGRPCExampleClient(cc *grpc.ClientConn) GRPCExampleClient {
  return &gRPCExampleClient{cc}
}

func (c *gRPCExampleClient) GetPerson(ctx context.Context, in *flatbuffers.Builder, 
	opts... grpc.CallOption) (* Person, error) {
  out := new(Person)
  err := grpc.Invoke(ctx, "/grpcexample.GRPCExample/GetPerson", in, out, c.cc, opts...)
  if err != nil { return nil, err }
  return out, nil
}

func (c *gRPCExampleClient) ListPeople(ctx context.Context, in *flatbuffers.Builder, 
	opts... grpc.CallOption) (GRPCExample_ListPeopleClient, error) {
  stream, err := grpc.NewClientStream(ctx, &_GRPCExample_serviceDesc.Streams[0], c.cc, "/grpcexample.GRPCExample/ListPeople", opts...)
  if err != nil { return nil, err }
  x := &gRPCExampleListPeopleClient{stream}
  if err := x.ClientStream.SendMsg(in); err != nil { return nil, err }
  if err := x.ClientStream.CloseSend(); err != nil { return nil, err }
  return x,nil
}

type GRPCExample_ListPeopleClient interface {
  Recv() (*Person, error)
  grpc.ClientStream
}

type gRPCExampleListPeopleClient struct{
  grpc.ClientStream
}

func (x *gRPCExampleListPeopleClient) Recv() (*Person, error) {
  m := new(Person)
  if err := x.ClientStream.RecvMsg(m); err != nil { return nil, err }
  return m, nil
}

func (c *gRPCExampleClient) ArrayPeople(ctx context.Context, in *flatbuffers.Builder, 
	opts... grpc.CallOption) (* Result, error) {
  out := new(Result)
  err := grpc.Invoke(ctx, "/grpcexample.GRPCExample/ArrayPeople", in, out, c.cc, opts...)
  if err != nil { return nil, err }
  return out, nil
}

// Server API for GRPCExample service
type GRPCExampleServer interface {
  GetPerson(context.Context, *Request) (*flatbuffers.Builder, error)  
  ListPeople(*Request, GRPCExample_ListPeopleServer) error  
  ArrayPeople(context.Context, *Request) (*flatbuffers.Builder, error)  
}

func RegisterGRPCExampleServer(s *grpc.Server, srv GRPCExampleServer) {
  s.RegisterService(&_GRPCExample_serviceDesc, srv)
}

func _GRPCExample_GetPerson_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(Request)
  if err := dec(in); err != nil { return nil, err }
  if interceptor == nil { return srv.(GRPCExampleServer).GetPerson(ctx, in) }
  info := &grpc.UnaryServerInfo{
    Server: srv,
    FullMethod: "/grpcexample.GRPCExample/GetPerson",
  }
  
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(GRPCExampleServer).GetPerson(ctx, req.(* Request))
  }
  return interceptor(ctx, in, info, handler)
}


func _GRPCExample_ListPeople_Handler(srv interface{}, stream grpc.ServerStream) error {
  m := new(Request)
  if err := stream.RecvMsg(m); err != nil { return err }
  return srv.(GRPCExampleServer).ListPeople(m, &gRPCExampleListPeopleServer{stream})
}

type GRPCExample_ListPeopleServer interface { 
  Send(* flatbuffers.Builder) error
  grpc.ServerStream
}

type gRPCExampleListPeopleServer struct {
  grpc.ServerStream
}

func (x *gRPCExampleListPeopleServer) Send(m *flatbuffers.Builder) error {
  return x.ServerStream.SendMsg(m)
}


func _GRPCExample_ArrayPeople_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(Request)
  if err := dec(in); err != nil { return nil, err }
  if interceptor == nil { return srv.(GRPCExampleServer).ArrayPeople(ctx, in) }
  info := &grpc.UnaryServerInfo{
    Server: srv,
    FullMethod: "/grpcexample.GRPCExample/ArrayPeople",
  }
  
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(GRPCExampleServer).ArrayPeople(ctx, req.(* Request))
  }
  return interceptor(ctx, in, info, handler)
}


var _GRPCExample_serviceDesc = grpc.ServiceDesc{
  ServiceName: "grpcexample.GRPCExample",
  HandlerType: (*GRPCExampleServer)(nil),
  Methods: []grpc.MethodDesc{
    {
      MethodName: "GetPerson",
      Handler: _GRPCExample_GetPerson_Handler, 
    },
    {
      MethodName: "ArrayPeople",
      Handler: _GRPCExample_ArrayPeople_Handler, 
    },
  },
  Streams: []grpc.StreamDesc{
    {
      StreamName: "ListPeople",
      Handler: _GRPCExample_ListPeople_Handler, 
      ServerStreams: true,
    },
  },
}

